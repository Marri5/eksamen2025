<div class="container">
    <!-- Header Section -->
    <div class="row mb-5">
        <div class="col-12 text-center">
            <h1 class="display-4 text-primary mb-3">
                <i class="fas fa-paw me-3"></i>
                Stem på din favoritt rev!
            </h1>
            <p class="lead text-muted">
                Velg den søteste reven ved å klikke på knappen under bildet.
            </p>
        </div>
    </div>

    <!-- Error Display -->
    <% if (error) { %>
    <div class="row mb-4">
        <div class="col-12">
            <div class="alert alert-warning alert-dismissible fade show" role="alert">
                <i class="fas fa-exclamation-triangle me-2"></i>
                <%= error %>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        </div>
    </div>
    <% } %>

    <!-- Current Leader Display -->
    <% if (statistics && statistics.topFox) { %>
    <div class="row mb-5">
        <div class="col-12">
            <div class="card bg-light border-primary">
                <div class="card-body text-center">
                    <h5 class="card-title text-primary">
                        <i class="fas fa-crown me-2"></i>
                        Ledende rev
                    </h5>
                    <div class="row align-items-center">
                        <div class="col-md-3">
                            <img src="<%= statistics.topFox.imageUrl %>" 
                                 alt="Leading fox" 
                                 class="img-fluid rounded shadow-sm"
                                 style="max-height: 120px; object-fit: cover;">
                        </div>
                        <div class="col-md-9">
                            <p class="mb-2">
                                <strong>Rev <%= statistics.topFox._id %></strong> leder med 
                                <span class="badge bg-primary fs-6">
                                    <%= statistics.topFox.voteCount %> stemmer
                                </span>
                            </p>
                            <p class="text-muted small mb-0">
                                Totalt <%= statistics.summary.totalVotes %> stemmer avgitt
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <% } %>

    <!-- Voting Section -->
    <div class="row mb-5">
        <div class="col-12">
            <h2 class="text-center mb-4">
                <i class="fas fa-vote-yea me-2"></i>
                Velg din favoritt
            </h2>
        </div>
    </div>

    <!-- Fox Images for Voting -->
    <div id="voting-container" class="row justify-content-center">
        <% if (foxes && foxes.length > 0) { %>
            <% foxes.forEach((fox, index) => { %>
            <div class="col-lg-5 col-md-6 mb-4">
                <div class="card h-100 shadow-sm fox-card" data-fox-id="<%= fox.foxId %>">
                    <div class="card-img-container position-relative">
                        <img src="<%= fox.imageUrl %>" 
                             alt="Fox <%= fox.foxId %>" 
                             class="card-img-top fox-image"
                             loading="lazy"
                             onerror="this.onerror=null; this.src='/images/fallback-fox.jpg';">
                        
                        <!-- Vote Count Badge (will be updated via JavaScript) -->
                        <div class="vote-count-badge position-absolute top-0 end-0 m-2 d-none">
                            <span class="badge bg-primary">
                                <i class="fas fa-heart me-1"></i>
                                <span class="vote-count">0</span>
                            </span>
                        </div>
                    </div>
                    
                    <div class="card-body text-center">
                        <h5 class="card-title">Rev <%= fox.foxId %></h5>
                        <p class="card-text text-muted small">
                            Klikk for å stemme på denne reven
                        </p>
                        
                        <!-- Vote Button -->
                        <button class="btn btn-primary btn-lg vote-btn" 
                                data-fox-id="<%= fox.foxId %>" 
                                data-image-url="<%= fox.imageUrl %>">
                            <i class="fas fa-heart me-2"></i>
                            Stem på denne!
                        </button>
                    </div>
                </div>
            </div>
            <% }); %>
        <% } else { %>
        <div class="col-12 text-center">
            <div class="card border-warning">
                <div class="card-body">
                    <h5 class="card-title text-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Ingen rever tilgjengelig
                    </h5>
                    <p class="card-text">
                        Kunne ikke laste inn rev-bilder. Prøv å oppdatere siden.
                    </p>
                    <button class="btn btn-primary" onclick="location.reload()">
                        <i class="fas fa-sync-alt me-2"></i>
                        Oppdater siden
                    </button>
                </div>
            </div>
        </div>
        <% } %>
    </div>

    <!-- Action Buttons -->
    <div class="row mt-4">
        <div class="col-12 text-center">
            <button id="new-foxes-btn" class="btn btn-outline-primary btn-lg me-3">
                <i class="fas fa-sync-alt me-2"></i>
                Få nye rever
            </button>
            
            <a href="/statistics" class="btn btn-info btn-lg">
                <i class="fas fa-chart-bar me-2"></i>
                Se all statistikk
            </a>
        </div>
    </div>

    <!-- Statistics Preview -->
    <% if (statistics && statistics.topFoxes && statistics.topFoxes.length > 0) { %>
    <div class="row mt-5">
        <div class="col-12">
            <h3 class="text-center mb-4">
                <i class="fas fa-trophy me-2"></i>
                Topp 3 mest populære rever
            </h3>
            
            <div class="row">
                <% statistics.topFoxes.slice(0, 3).forEach((fox, index) => { %>
                <div class="col-md-4 mb-3">
                    <div class="card h-100 <%= index === 0 ? 'border-warning' : '' %>">
                        <div class="position-relative">
                            <img src="<%= fox.imageUrl %>" 
                                 alt="Fox <%= fox._id %>" 
                                 class="card-img-top"
                                 style="height: 200px; object-fit: cover;">
                            
                            <!-- Ranking Badge -->
                            <div class="position-absolute top-0 start-0 m-2">
                                <span class="badge bg-<%= index === 0 ? 'warning' : index === 1 ? 'secondary' : 'dark' %> fs-6">
                                    #<%= index + 1 %>
                                </span>
                            </div>
                        </div>
                        
                        <div class="card-body text-center">
                            <h6 class="card-title">Rev <%= fox._id %></h6>
                            <p class="card-text">
                                <span class="badge bg-primary">
                                    <%= fox.voteCount %> stemmer
                                </span>
                            </p>
                        </div>
                    </div>
                </div>
                <% }); %>
            </div>
        </div>
    </div>
    <% } %>
</div>

<!-- JavaScript for voting functionality -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize voting functionality
    initializeVoting();
    
    // Auto-refresh statistics every 30 seconds
    setInterval(updateStatistics, 30000);
});

function initializeVoting() {
    console.log('Initializing voting...');
    
    // Add click handlers to vote buttons
    const voteButtons = document.querySelectorAll('.vote-btn');
    console.log('Found vote buttons:', voteButtons.length);
    
    voteButtons.forEach((button, index) => {
        console.log(`Setting up button ${index}:`, button.getAttribute('data-fox-id'));
        
        button.addEventListener('click', function() {
            console.log('Vote button clicked!');
            const foxId = this.getAttribute('data-fox-id');
            const imageUrl = this.getAttribute('data-image-url');
            
            console.log('Vote button data:', { foxId, imageUrl });
            vote(foxId, imageUrl, this);
        });
    });
    
    // Add click handler to new foxes button
    document.getElementById('new-foxes-btn').addEventListener('click', function() {
        loadNewFoxes();
    });
}

function vote(foxId, imageUrl, buttonElement) {
    console.log('Vote function called:', { foxId, imageUrl });
    
    // Disable button to prevent double-clicking
    buttonElement.disabled = true;
    buttonElement.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Stemmer...';
    
    // Show loading spinner (check if function exists)
    if (typeof showLoading === 'function') {
        showLoading();
    } else {
        console.warn('showLoading function not found');
    }
    
    fetch('/vote', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            foxId: foxId,
            imageUrl: imageUrl
        })
    })
    .then(response => {
        console.log('Vote response received:', response.status);
        return response.json();
    })
    .then(data => {
        console.log('Vote response data:', data);
        
        if (typeof hideLoading === 'function') {
            hideLoading();
        }
        
        if (data.success) {
            // Use alert if showAlert doesn't exist
            if (typeof showAlert === 'function') {
                showAlert('success', `<i class="fas fa-check me-2"></i>Takk for stemmen! Rev ${foxId} fikk din stemme.`);
            } else {
                alert(`Takk for stemmen! Rev ${foxId} fikk din stemme.`);
            }
            
            // Update button to show success
            buttonElement.innerHTML = '<i class="fas fa-check me-2"></i>Stemme avgitt!';
            buttonElement.classList.remove('btn-primary');
            buttonElement.classList.add('btn-success');
            
            // Update vote count if available
            if (data.data && data.data.totalVotes) {
                updateVoteDisplay(data.data);
            }
            
            // Update statistics immediately
            updateStatistics();
            
            // Load new foxes after 3 seconds
            setTimeout(() => {
                loadNewFoxes();
            }, 3000);
            
        } else {
            if (typeof showAlert === 'function') {
                showAlert('danger', `<i class="fas fa-exclamation-triangle me-2"></i>${data.error}`);
            } else {
                alert(`Feil: ${data.error}`);
            }
            
            // Re-enable button
            buttonElement.disabled = false;
            buttonElement.innerHTML = '<i class="fas fa-heart me-2"></i>Stem på denne!';
        }
    })
    .catch(error => {
        console.error('Voting error:', error);
        
        if (typeof hideLoading === 'function') {
            hideLoading();
        }
        
        if (typeof showAlert === 'function') {
            showAlert('danger', '<i class="fas fa-exclamation-triangle me-2"></i>Noe gikk galt. Prøv igjen.');
        } else {
            alert('Noe gikk galt. Prøv igjen.');
        }
        
        // Re-enable button
        buttonElement.disabled = false;
        buttonElement.innerHTML = '<i class="fas fa-heart me-2"></i>Stem på denne!';
    });
}

function loadNewFoxes() {
    console.log('Loading new foxes...');
    const button = document.getElementById('new-foxes-btn');
    if (!button) {
        console.error('New foxes button not found');
        return;
    }
    
    const originalText = button.innerHTML;
    
    button.disabled = true;
    button.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Laster nye rever...';
    
    if (typeof showLoading === 'function') {
        showLoading();
    }
    
    fetch('/new-foxes?count=2')
    .then(response => {
        console.log('New foxes response:', response.status, response.ok);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        return response.json();
    })
    .then(data => {
        console.log('New foxes data received:', data);
        console.log('Data success:', data.success);
        console.log('Data array:', data.data);
        
        if (typeof hideLoading === 'function') {
            hideLoading();
        }
        
        if (data.success && data.data) {
            updateFoxDisplay(data.data);
            if (typeof showAlert === 'function') {
                showAlert('info', '<i class="fas fa-sync-alt me-2"></i>Nye rever lastet!');
            } else {
                console.log('Nye rever lastet!');
            }
        } else {
            if (typeof showAlert === 'function') {
                showAlert('warning', '<i class="fas fa-exclamation-triangle me-2"></i>Kunne ikke laste nye rever. Prøv igjen.');
            } else {
                alert('Kunne ikke laste nye rever. Prøv igjen.');
            }
        }
        
        button.disabled = false;
        button.innerHTML = originalText;
    })
    .catch(error => {
        console.error('Error loading new foxes:', error);
        
        if (typeof hideLoading === 'function') {
            hideLoading();
        }
        
        if (typeof showAlert === 'function') {
            showAlert('danger', '<i class="fas fa-exclamation-triangle me-2"></i>Noe gikk galt. Prøv igjen.');
        } else {
            alert('Noe gikk galt. Prøv igjen.');
        }
        
        button.disabled = false;
        button.innerHTML = originalText;
    });
}

function updateFoxDisplay(foxes) {
    console.log('Updating fox display with:', foxes);
    console.log('Foxes array length:', foxes ? foxes.length : 'undefined');
    
    const container = document.getElementById('voting-container');
    
    if (!container) {
        console.error('Voting container not found');
        return;
    }
    
    console.log('Found voting container:', container);
    
    // Clear existing foxes
    console.log('Clearing existing foxes...');
    container.innerHTML = '';
    
    // Check if foxes is an array
    if (!Array.isArray(foxes)) {
        console.error('Foxes is not an array:', typeof foxes);
        return;
    }
    
    // Add new foxes
    foxes.forEach((fox, index) => {
        console.log(`Creating card for fox ${fox.foxId} with image ${fox.imageUrl}`);
        try {
            const foxCard = createFoxCard(fox);
            if (foxCard) {
                container.appendChild(foxCard);
                console.log(`Successfully added fox card ${index + 1}/${foxes.length}`);
            } else {
                console.error(`createFoxCard returned null for fox:`, fox);
            }
        } catch (error) {
            console.error(`Error creating card for fox ${fox.foxId}:`, error);
        }
    });
    
    console.log(`Added ${foxes.length} fox cards to container`);
    
    // Re-initialize voting functionality
    console.log('Re-initializing voting after fox display update');
    initializeVoting();
}

function createFoxCard(fox) {
    console.log('Creating fox card for:', fox);
    
    if (!fox || !fox.foxId || !fox.imageUrl) {
        console.error('Invalid fox data:', fox);
        return null;
    }
    
    const col = document.createElement('div');
    col.className = 'col-lg-5 col-md-6 mb-4';
    
    col.innerHTML = `
        <div class="card h-100 shadow-sm fox-card" data-fox-id="${fox.foxId}">
            <div class="card-img-container position-relative">
                <img src="${fox.imageUrl}" 
                     alt="Fox ${fox.foxId}" 
                     class="card-img-top fox-image"
                     loading="lazy"
                     onerror="this.onerror=null; this.src='/images/fallback-fox.jpg';">
                
                <div class="vote-count-badge position-absolute top-0 end-0 m-2 d-none">
                    <span class="badge bg-primary">
                        <i class="fas fa-heart me-1"></i>
                        <span class="vote-count">0</span>
                    </span>
                </div>
            </div>
            
            <div class="card-body text-center">
                <h5 class="card-title">Rev ${fox.foxId}</h5>
                <p class="card-text text-muted small">
                    Klikk for å stemme på denne reven
                </p>
                
                <button class="btn btn-primary btn-lg vote-btn" 
                        data-fox-id="${fox.foxId}" 
                        data-image-url="${fox.imageUrl}">
                    <i class="fas fa-heart me-2"></i>
                    Stem på denne!
                </button>
            </div>
        </div>
    `;
    
    console.log('Created fox card element');
    return col;
}

function updateStatistics() {
    console.log('Updating statistics...');
    fetch('/api/statistics')
    .then(response => {
        console.log('Statistics response:', response.status);
        return response.json();
    })
    .then(data => {
        console.log('Statistics data:', data);
        if (data.success) {
            // Update leader display if it exists
            updateLeaderDisplay(data.data);
        }
    })
    .catch(error => {
        console.error('Error updating statistics:', error);
    });
}

function updateLeaderDisplay(statistics) {
    console.log('Updating leader display with:', statistics);
    
    // Find leader section and update it
    const leaderSection = document.querySelector('.row .card.bg-light.border-primary');
    if (leaderSection && statistics.topFox) {
        const badgeElement = leaderSection.querySelector('.badge.bg-primary');
        if (badgeElement) {
            badgeElement.textContent = `${statistics.topFox.voteCount} stemmer`;
        }
        
        const totalVotesElement = leaderSection.querySelector('.text-muted.small');
        if (totalVotesElement && statistics.summary) {
            totalVotesElement.textContent = `Totalt ${statistics.summary.totalVotes} stemmer avgitt`;
        }
    }
}

function updateVoteDisplay(voteData) {
    console.log('Updating vote display with:', voteData);
    
    // Update vote counts and leader information
    if (voteData.topFox) {
        updateLeaderDisplay({ topFox: voteData.topFox, summary: { totalVotes: voteData.totalVotes } });
    }
    
    // Refresh statistics display
    updateStatistics();
}
</script> 